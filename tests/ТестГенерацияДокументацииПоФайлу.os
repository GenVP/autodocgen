///////////////////////////////////////////////////////////////////////////////
//
// Тестирование основной функциональности пакета
// Проверка на соответствие выгрузки эталону
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

#Использовать "..\src"
#Использовать logos
#Использовать asserts
#Использовать fs

///////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт

	Лог = Логирование.ПолучитьЛог("Тест");

	МассивТестов = Новый Массив;
	МассивТестов.Добавить("ТестСформироватьДокументациюОбщегоМодуляJSON");
	МассивТестов.Добавить("ТестСформироватьДокументациюОбщегоМодуляHTML");
	МассивТестов.Добавить("ТестСформироватьДокументациюОбщегоМодуляMarkDown");

	Возврат МассивТестов;

КонецФункции

Процедура ПередЗапускомТеста() Экспорт

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Форматы = Новый Массив();
	Форматы.Добавить("JSON");
	Форматы.Добавить("HTML");
	Форматы.Добавить("Markdown");

	Для Каждого Формат Из Форматы Цикл
		
		КаталогДокументации = ОбъединитьПути(ТекущийКаталог(), СтрШаблон("%1_autodoc", Формат));
		
		Файл = Новый Файл(КаталогДокументации);
		Если Файл.Существует() Тогда
			
			УдалитьФайлы(КаталогДокументации);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ТестСформироватьДокументациюОбщегоМодуляJSON() Экспорт
	
	ФайлМодуля = ТестовыйМодуль();
	
	ИмяСформированногоФайла = СформироватьДокументациюМодуля(ФайлМодуля, "JSON");

	Чтение = Новый ЧтениеJSON();
	Чтение.ОткрытьФайл(ИмяСформированногоФайла);
	ПрочитатьJSON(Чтение);
	Чтение.Закрыть();

КонецПроцедуры

Процедура ТестСформироватьДокументациюОбщегоМодуляHTML() Экспорт
	
	ФайлМодуля = ТестовыйМодуль();
	
	СформироватьДокументациюМодуля(ФайлМодуля, "HTML");

КонецПроцедуры

Процедура ТестСформироватьДокументациюОбщегоМодуляMarkDown() Экспорт
	
	ФайлМодуля = ТестовыйМодуль();
	
	СформироватьДокументациюМодуля(ФайлМодуля, "MarkDown");

КонецПроцедуры

Процедура ТестПубликацииConfluence() Экспорт

	КаталогИсходников = ОбъединитьПути(КаталогФикстур(), "configuration");
	
	Опубликовать(КаталогИсходников, Неопределено);

КонецПроцедуры

Процедура ТестПубликацииConfluenceСРуководствами() Экспорт

	КаталогИсходников = ОбъединитьПути(КаталогФикстур(), "configuration");
	КаталогРуководств = ОбъединитьПути(КаталогФикстур(), "Doc");
	
	Опубликовать(КаталогИсходников, КаталогРуководств);

КонецПроцедуры

Процедура Опубликовать(КаталогИсходников, КаталогРуководств)

	ФайлНастроек = ОбъединитьПути(КаталогФикстур(), "config.json");

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("КаталогИсходныхФайлов", КаталогИсходников);
	ПараметрыКоманды.Вставить("КаталогКонфигурации", КаталогИсходников);
	ПараметрыКоманды.Вставить("Формат", "confluence");
	ПараметрыКоманды.Вставить("ФорматEDT", Ложь);
	ПараметрыКоманды.Вставить("РежимGit", Ложь);
	ПараметрыКоманды.Вставить("ГенерацияПриНаличииОшибок", Ложь);
	ПараметрыКоманды.Вставить("ФайлНастроек", ФайлНастроек);
	ПараметрыКоманды.Вставить("КаталогДополнительнойДокументации", КаталогРуководств);

	ОбщегоНазначения.ДополнитьПараметры(ПараметрыКоманды);

	Конфигурация = РазборКонфигураций.ЗагрузитьКонфигурацию(ПараметрыКоманды.КаталогКонфигурации);
	Конфигурация.ЗаполнитьПодсистемыОбъектовКонфигурации();
	Конфигурация.НайтиМодули();

	НастройкиГенератора = Новый Структура;

	НастройкиГенератора.Вставить("Парсер", Конфигурация);
	НастройкиГенератора.Вставить("НастройкиАнализаИзменений", ПараметрыКоманды.НастройкиАнализаИзменений);

	ГенераторСодержимого = ОбщегоНазначения.ПолучитьГенераторДокументации(ПараметрыКоманды.НастройкиСтенда, ПараметрыКоманды.Формат);
		
	ГенераторДокументации = Новый ГенераторДокументации(ГенераторСодержимого);
	
	РезультатГенерации = ГенераторДокументации.Сгенерировать(НастройкиГенератора);
	
	Ошибки = РезультатГенерации.Ошибки;

	Если РезультатГенерации.Успешно Тогда
		РезультатПубликации = ГенераторДокументации.Опубликовать(РезультатГенерации);
		Ошибки = РезультатПубликации.ОшибкиПубликации;
		
	КонецЕсли;
	
	Сообщить(СтрСоединить(Ошибки, Символы.ПС));

КонецПроцедуры

Функция СформироватьДокументациюМодуля(ИмяФайла, Формат)

	ФайлНастроек = ОбъединитьПути(КаталогФикстур(), "config.json");

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ИсходныйФайл", ИмяФайла);
	ПараметрыКоманды.Вставить("Формат", Формат);
	ПараметрыКоманды.Вставить("ФорматEDT", Истина);
	ПараметрыКоманды.Вставить("РежимGit", Ложь);
	ПараметрыКоманды.Вставить("ГенерацияПриНаличииОшибок", Ложь);
	ПараметрыКоманды.Вставить("ФайлНастроек", ФайлНастроек);
	
	КаталогДокументации = ОбъединитьПути(ТекущийКаталог(), СтрШаблон("%1_autodoc", ПараметрыКоманды.Формат));
	
	СоздатьКаталог(КаталогДокументации);

	ТекстОшибки = "";
	
	Команда = Новый СгенерироватьДокументациюПоФайлу();
	Успех = Команда.ВыполнитьГенерациюДокументации(ПараметрыКоманды, ТекстОшибки);
	
	Если Формат <> "JSON" Тогда
		
		ИмяСформированногоФайла = ОбъединитьПути(КаталогДокументации, "autodoc", "Программный интерфейс. Модуль." + Формат);
		
	Иначе
		
		ИмяСформированногоФайла = ОбъединитьПути(КаталогДокументации, "autodoc", "Модуль." + Формат);
		
	КонецЕсли;

	Ожидаем.Что(Успех, "Не удалось сформировать документацию по модулю. " + ТекстОшибки).ЭтоИстина();
	Ожидаем.Что(ТекстОшибки, "При формировании возникли ошибки. " + ТекстОшибки).НЕ_().Заполнено();
	Файл = Новый Файл(ИмяСформированногоФайла);
	Ожидаем.Что(Файл.Существует(), "Не найден сформированный файл").ЭтоИстина();
	
	Возврат ИмяСформированногоФайла;

КонецФункции

Функция ТестовыйМодуль()

	ОбщиеМодули = ОбъединитьПути(КаталогФикстур(), "configuration", "CommonModules");
	ФайлМодуля = ОбъединитьПути(ОбщиеМодули, "TestModule", "Ext", "Module.bsl");

	Возврат ФайлМодуля;

КонецФункции

Функция КаталогФикстур()
	
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures");

КонецФункции
