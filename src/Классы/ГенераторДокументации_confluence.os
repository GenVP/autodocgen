///////////////////////////////////////////////////////////////////////////////
//
// Служебный класс генерации документации в формате confluence
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

#Использовать confluence

Перем Шаблоны;

Перем АнализироватьТолькоПотомковПодсистемы Экспорт;

Перем ПодключениеConfluence;
Перем ПространствоConflunece;
Перем КорневаяСтраницаConflunece;

Перем СимволыЗамены;
Перем ОбновлятьИзмененныеСтраницы;

Перем АдресКорневойСтраницы;

Перем Лог;

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

#Область ГенерацияДанных

// ДокументацияПоМодулю
//
// Параметры:
//   ДанныеМодуля - Структура - Описание модуля, структура содержащая массив описаний методов, см. ГенераторДокументации.ОписаниеМетода
//   Ошибки - Массив - Коллекция ошибок генерации документации, сюда помещаем информацию о возникших ошибках
//
//  Возвращаемое значение:
//   Строка - Текст документации по модулю, если пустая строка, публикация не выполняется
//
Функция ДокументацияПоМодулю(ДанныеМодуля, Ошибки) Экспорт
	
	Строки = ПомощникГенерацииДокументации.СформироватьОписаниеМодуляПоШаблонам(ДанныеМодуля, Шаблоны, СимволыЗамены);
	
	Возврат СтрСоединить(Строки, " ");
	
КонецФункции

// ДокументацияКонстанты
//
// Параметры:
//   МассивКонстант - Массив - Массив структур описаний констант
//						Имя - Имя константы
//						Тип - Тип значения константы
//						Описание - Описание константы
//						Подсистема - Описание подсистем, которой принадлежит константа. см ГенераторДокументации.ПолучитьСтруктуруПодсистем
//   Ошибки - Массив - Коллекция ошибок генерации документации, сюда помещаем информацию о возникших ошибках
//
//  Возвращаемое значение:
//   Строка - Текст документации по модулю, если пустая строка, публикация не выполняется
//
Функция ДокументацияКонстанты(МассивКонстант, Ошибки) Экспорт
	
	Строки = ПомощникГенерацииДокументации.СформироватьОписаниеКонстантПоШаблонам(МассивКонстант, Шаблоны, СимволыЗамены);
	
	Возврат СтрСоединить(Строки, " ");
	
КонецФункции

#КонецОбласти

#Область Публикация

// ОпубликоватьРаздел
//
// Параметры:
//   Раздел - СтрокаТаблицыЗначений - Описание публикуемого раздела
//				* Имя - Имя страницы/раздела
//				* Родитель - Родитель страницы, ссылку на строку этой же таблицы
//				* Содержимое - Содержимое страницы
//				* Идентификатор - Служебное поле, можно использовать при публикации
//   ОбъектыРаздела - СтрокаТаблицыЗначений - Массив описаний объектов раздела
//				* Имя - Имя объекта
//				* Родитель - Родитель страницы, ссылку на строку этой же таблицы
//				* Содержимое - Содержимое страницы
//				* Идентификатор - Служебное поле, можно использовать при публикации
//   ОшибкиПубликации - Массив - Коллекция ошибок публикации документации, сюда помещаем информацию о возникших ошибках
//
//  Возвращаемое значение:
//   Булево - Признак успешности
//
Функция ОпубликоватьРаздел(Раздел, ОбъектыРаздела, ОшибкиПубликации) Экспорт
	
	Лог.Отладка("=================================================");
	Лог.Отладка("Публикация раздела: %1", ?(Раздел = Неопределено, "Корневой раздел", Раздел.Имя));
	
	Если НЕ ПроверкаВозможностиПубликации(Раздел, ОшибкиПубликации) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Успешно = Истина;
	
	АдресРаздела = СоздатьРаздел(Раздел, ОшибкиПубликации);
	
	Для Каждого НоваяСтраница Из ОбъектыРаздела Цикл
		
		Попытка

			Лог.Отладка("=================================================");
			Лог.Отладка("Публикация страницы: %1", НоваяСтраница.Имя);
	
			АдресСтраницы = АдресПодчиненнойСтраницы(АдресРаздела, НоваяСтраница.Имя);
			
			СоздатьОбновитьСтраницу(
				АдресСтраницы,
				НоваяСтраница.Содержимое
			);
			
			Лог.Отладка("=================================================");

		Исключение
			
			ОшибкиПубликации.Добавить("Ошибка создания страницы '" + НоваяСтраница.Имя + "': " + ОписаниеОшибки());
			Успешно = Ложь;
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Лог.Отладка("Изменения раздела опубликованы: %1", ?(Раздел = Неопределено, "Корневой раздел", Раздел.Имя));
	Лог.Отладка("=================================================");
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьСтруктуруДляПубликацииКаталога(РезультатГенерации, Каталог, Родитель, ТолькоКаталоги = Ложь) Экспорт
	
	ЕстьПодчиненные = Ложь;
	
	Для Каждого Файл Из НайтиФайлы(Каталог, "*", Ложь) Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			
			СтруктураПоиска = Новый Структура("Имя, Родитель", Файл.Имя, Родитель);
			
			СуществующиеРазделы = РезультатГенерации.СоздаваемыеРазделы.НайтиСтроки(СтруктураПоиска);
			
			Если СуществующиеРазделы.Количество() Тогда
				
				СтрокаРаздел = СуществующиеРазделы[0];
				
			Иначе
				
				СтрокаРаздел = РезультатГенерации.СоздаваемыеРазделы.Добавить();
				СтрокаРаздел.Имя 		= Файл.Имя;
				СтрокаРаздел.Тип 		= "РазделРуководства";
				СтрокаРаздел.Родитель 	= Родитель;
				
			КонецЕсли;

			Если ПолучитьСтруктуруДляПубликацииКаталога(РезультатГенерации, Файл.ПолноеИмя, СтрокаРаздел) Тогда
				
				ЕстьПодчиненные = Истина;
				
			ИначеЕсли СуществующиеРазделы.Количество() = 0 Тогда // Пустой созданный раздел удалим
				
				РезультатГенерации.СоздаваемыеРазделы.Удалить(СтрокаРаздел);

			КонецЕсли;
			
		ИначеЕсли ТолькоКаталоги Тогда
			
			Продолжить;

		ИначеЕсли СтрСравнить(Файл.Расширение, ".html") = 0 Тогда
		
			СтрокаСтраницы = РезультатГенерации.СозданныеОбъекты.Добавить();
			
			СтрокаСтраницы.Имя 			= Файл.ИмяБезРасширения;
			СтрокаСтраницы.Тип 			= "Руководство";
			СтрокаСтраницы.Родитель 	= Родитель;
			СтрокаСтраницы.Содержимое 	= ТекстФайла(Файл.ПолноеИмя);

			ЕстьПодчиненные = Истина;
			
		ИначеЕсли СтрСравнить(Файл.Расширение, ".md") = 0 ИЛИ СтрСравнить(Файл.Расширение, ".markdown") = 0 Тогда
			
			СтрокаСтраницы = РезультатГенерации.СозданныеОбъекты.Добавить();

			СтрокаСтраницы.Имя 			= Файл.ИмяБезРасширения;
			СтрокаСтраницы.Тип 			= "Руководство";
			СтрокаСтраницы.Родитель 	= Родитель;
			СтрокаСтраницы.Содержимое 	= Новый Структура("Формат, ИмяФайла");
			СтрокаСтраницы.Содержимое.Формат = confluence.ФорматыСодержимого.MarkDown;
			СтрокаСтраницы.Содержимое.ИмяФайла = Файл.ПолноеИмя;
			
			ЕстьПодчиненные = Истина;

		Иначе
			
			Лог.Информация("Файл %1 пропущен, его публикация не поддерживается", Файл.ПолноеИмя);

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьПодчиненные;

КонецФункции

// ПолучитьСтруктуруОпубликованныхСтраниц
//
// Параметры:
//   Раздел - СтрокаТаблицыЗначений, Строка - Описание создаваемого раздела или идентификатор страницы
//
//  Возвращаемое значение:
//   ТаблицаЗначений - Подчиненные страницы (Наименование, Представление)
//
Функция ПолучитьСтруктуруОпубликованныхСтраниц(Раздел) Экспорт
	
	Результат = Новый Структура("Ошибки", Новый Массив());
	
	Если НЕ ПроверкаВозможностиПубликации(Неопределено, Результат.Ошибки) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если ТипЗнч(Раздел) = Тип("Строка") Тогда
		
		Идентификатор = Раздел;
		
	Иначе
		
		Идентификатор = АдресРаздела(Раздел).Идентификатор;
		
	КонецЕсли;
	
	Страницы = Confluence.ПодчиненныеСтраницыПоИдентификатору(ПодключениеConfluence, Идентификатор);
	
	Страницы.Колонки.Добавить("Представление");
	
	Для Каждого Страница Из Страницы Цикл
		
		Страница.Представление = СтрШаблон("'%1' (%2)", Страница.Наименование, Страница.Идентификатор);

	КонецЦикла;

	Возврат Страницы;

КонецФункции

// ПрефиксИмени
//
// Параметры:
//   ТипСтраницы - Строка - Тип источника документации
//
//  Возвращаемое значение:
//   Строка - Префикс имени объекта (страницы)
//
Функция ПрефиксИмени(ТипСтраницы) Экспорт
	
	Если ТипСтраницы = "Модуль" Тогда
		
		Возврат "Программный интерфейс: ";
		
	ИначеЕсли ТипСтраницы = "Руководство" Тогда
		
		Возврат "Руководство: ";
		
	ИначеЕсли ТипСтраницы = "Подсистема" Тогда
		
		Возврат "Подсистема ";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;

КонецФункции

// УдалитьСтраницу
//
// Параметры:
//   Страница - СтрокаТаблицыЗначений - Описание страницы полученное из ПолучитьСтруктуруОпубликованныхСтраниц
//
//  Возвращаемое значение:
//   Булево - Признак успешности
//
Функция УдалитьСтраницу(Страница) Экспорт
	
	Confluence.УдалитьСтраницу(ПодключениеConfluence, ПространствоConflunece, Страница.Наименование, Страница.Идентификатор, Истина);
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область Настройки

// Производит чтение настроек из конфигурационного файла и сохраняет их в свойствах объекта
//
// Параметры:
//	 НастройкиСтенда - Объект.НастройкиСтенда - Объект, содержащий информацию конфигурационного файла
//
// Возвращаемое значение:
//	Строка - описание возникших ошибок
Функция ПрочитатьНастройки(НастройкиСтенда) Экспорт
	
	ТекстОшибки = "";
	
	НастройкиConfluence = НастройкиСтенда.Настройка("AutodocGen\НастройкиConluence");
	Если ЗначениеЗаполнено(НастройкиConfluence) Тогда
		
		Попытка
			
			ПодключениеConfluence = confluence.ОписаниеПодключения(НастройкиConfluence["АдресСервера"], НастройкиConfluence["Пользователь"], НастройкиConfluence["Пароль"]);
			ПространствоConflunece = НастройкиConfluence["Пространство"];
			КорневаяСтраницаConflunece = НастройкиConfluence["КорневаяСтраница"];
			АнализироватьТолькоПотомковПодсистемы = Строка(НастройкиConfluence["АнализироватьТолькоПотомковПодсистемы"]);
			
			Если НЕ (ЗначениеЗаполнено(ПространствоConflunece) И ЗначениеЗаполнено(КорневаяСтраницаConflunece)) Тогда
				
				ВызватьИсключение "Некорректные настройки пространства и корневой страницы confluence";
				
			КонецЕсли;
			
			Шаблоны = ПомощникГенерацииДокументации.ЗагрузитьШаблоны(НастройкиConfluence["ПутьКШаблонам"], "Шаблоны_conluence.json");
			
		Исключение
			
			ТекстОшибки = "Ошибка установки соединения с сервером confluence: " + ОписаниеОшибки();
			
		КонецПопытки;
		
	Иначе
		
		ТекстОшибки = "Отсутствуют настройки подключения к confluence";
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область Служебные

Функция ПроверкаВозможностиПубликации(Раздел, ОшибкиПубликации)
	
	Если АдресКорневойСтраницы = Неопределено Тогда
		
		Идентификатор = Confluence.НайтиСтраницуПоИмени(ПодключениеConfluence, ПространствоConflunece, КорневаяСтраницаConflunece);
		
		АдресКорневойСтраницы = confluence.АдресСтраницы(ПространствоConflunece, КорневаяСтраницаConflunece, Идентификатор);
		
	КонецЕсли;
	
	Если ПустаяСтрока(АдресКорневойСтраницы.Идентификатор) Тогда
		
		ОшибкиПубликации.Добавить("В пространстве отсутствует корневая страница документации '" + КорневаяСтраницаConflunece + "'");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Раздел <> Неопределено И СоздатьРаздел(Раздел, ОшибкиПубликации) = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьРаздел(Раздел, ОшибкиПубликации)
	
	Если Раздел <> Неопределено 
		И Раздел.Родитель <> Неопределено 
		И НЕ ЗначениеЗаполнено(Раздел.Родитель.Идентификатор) Тогда

		ОшибкиПубликации.Добавить("Создание страницы подсистемы '" + Раздел.Имя + "' невозможно, т.к. не создана страница раздела");
		Возврат Неопределено;

	КонецЕсли;

	АдресРаздела = АдресРаздела(Раздел);
	
	Если НЕ ЗначениеЗаполнено(АдресРаздела.Идентификатор) Тогда
		
		Попытка
			
			НайтиСоздатьРаздел(АдресРаздела, ОписаниеРаздела(Раздел), ОшибкиПубликации);
			Раздел.Идентификатор = АдресРаздела;

		Исключение
			
			ОшибкиПубликации.Добавить("Ошибка создания страницы '" + Раздел.Имя + "': " + ОписаниеОшибки());
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;

	Возврат АдресРаздела;
	
КонецФункции

Функция АдресРаздела(Раздел)
	
	Адрес = Неопределено;
	
	Если Раздел = Неопределено Тогда
		
		Адрес = АдресКорневойСтраницы;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Раздел.Идентификатор) Тогда
		
		Если Раздел.Родитель = Неопределено Тогда
			
			Адрес = АдресПодчиненнойСтраницы(АдресКорневойСтраницы, Раздел.Имя);
			
		Иначе
			
			Адрес = АдресПодчиненнойСтраницы(Раздел.Родитель.Идентификатор, Раздел.Имя);
			
		КонецЕсли;

		Раздел.Идентификатор = Адрес;
		
	Иначе
		
		Адрес = Раздел.Идентификатор;
		
	КонецЕсли;

	Возврат Адрес;

КонецФункции

Функция НайтиСоздатьРаздел(АдресРаздела, Содержимое, Ошибки)

	Если НЕ ПустаяСтрока(АдресРаздела.Идентификатор) Тогда
		
		Возврат АдресРаздела.Идентификатор;
		
	КонецЕсли;
	
	АдресРаздела.Идентификатор = Confluence.НайтиСтраницуПоИмени(
												ПодключениеConfluence, 
												АдресРаздела.КодПространства, 
												АдресРаздела.ИмяСтраницы);
												
	Если НЕ ПустаяСтрока(АдресРаздела.Идентификатор) Тогда
		
		Возврат АдресРаздела.Идентификатор;
		
	КонецЕсли;
	
	Попытка
		
		Confluence.Создать(
			ПодключениеConfluence,
			АдресРаздела,
			Содержимое);

		Лог.Информация("Создан раздел '%1'", АдресРаздела.ИмяСтраницы);
		
	Исключение
		
		Ошибки.Добавить("Ошибка создания страницы '" + АдресРаздела.ИмяСтраницы + "': " + ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;

	Возврат АдресРаздела.Идентификатор;

КонецФункции

Функция СоздатьОбновитьСтраницу(Знач Адрес, Знач Содержимое)
	
	Если ПустаяСтрока(Адрес.ИдентификаторРодителя) Тогда
		
		ВызватьИсключение СтрШаблон("Для страницы '%1' не указан родитель", Адрес.ИмяСтраницы);
		
	КонецЕсли;

	РезультатСоздания = Confluence.СоздатьИлиОбновить(
		ПодключениеConfluence,
		Адрес,
		Содержимое,
		ОбновлятьИзмененныеСтраницы);


	Если РезультатСоздания.Действие = "Создание" Тогда
		Лог.Информация("Создана страница '%1' (%3.%2)", Адрес.ИмяСтраницы, Адрес.Идентификатор, Адрес.ИдентификаторРодителя);
	ИначеЕсли РезультатСоздания.Действие = "Обновление" Тогда
		Лог.Информация("Обновлена страница '%1'", Адрес.ИмяСтраницы);
	КонецЕсли;
	
	Возврат РезультатСоздания;

КонецФункции

Функция АдресПодчиненнойСтраницы(АдресРодителя, ИмяСтраницы)

	АдресСтраницы = confluence.АдресСтраницы(АдресРодителя.КодПространства, ИмяСтраницы, , АдресРодителя.Идентификатор);
	
	Возврат АдресСтраницы;
	
КонецФункции

Функция ТекстФайла(ИмяФайла)
	
	Чтение = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	Содержимое = Чтение.Прочитать();
	Чтение.Закрыть();

	Возврат Содержимое;
	
КонецФункции

Функция ОписаниеРаздела(Раздел)
	
	Если Раздел = Неопределено Тогда
		Описание = "";
	Иначе
		Описание = ПомощникГенерацииДокументации.ОбработатьСтроку(Раздел.Содержимое, СимволыЗамены);
	КонецЕсли;

	Если Раздел = Неопределено ИЛИ Раздел.Родитель = Неопределено Тогда
		Возврат СтрШаблон(Шаблоны.ШаблонСтраницыРаздела, Описание);
	Иначе
		Возврат СтрШаблон(Шаблоны.ШаблонСтраницыПодсистемы, Описание);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////

СимволыЗамены = Новый Соответствие;
СимволыЗамены.Вставить("&", "&amp;");
СимволыЗамены.Вставить("<", "&lt;");
СимволыЗамены.Вставить(">", "&gt;");
СимволыЗамены.Вставить(Символ(8211), "&ndash;");
СимволыЗамены.Вставить(Символ(8212), "&mdash;");
СимволыЗамены.Вставить(Символы.Таб, "    ");

ОбновлятьИзмененныеСтраницы = Истина; // в параметры выносить не будем... пока

Лог = МенеджерПриложения.ПолучитьЛог();