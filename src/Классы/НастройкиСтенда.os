///////////////////////////////////////////////////////////////////
//
// Работает с настройками в конфигурационном файле репозитория 1С
// в Git
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////

#Использовать json

///////////////////////////////////////////////////////////////////

Перем ИнициализацияВыполнена; 		// содержит признак инициализации репозитория
Перем НовыйКонфиг;					// содержит признак нового конфига
Перем Конфигурация;					// описание конфигурации
Перем АдресКонфигурационногоФайла;	// адрес нахождения конфигурационного файла
Перем ОбновлятьКонфигурацию;		// флаг необходимости обновления конфигурации / затирания

///////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////

// Инициализация
//	Выполняет инициализацию репозитория
//
// Параметры:
//  КонфигурационныйФайл - Строка - Путь до конфигурационного файла либо адрес каталога,
//									в котором находится конфигурационный файл v8config.json
//  ОбновлятьКонф - Булево - флаг необходимости обновления конфигурации / затирания
//
Процедура Инициализация(Знач КонфигурационныйФайл, ОбновлятьКонф = Ложь) Экспорт

	Конфигурация = Неопределено;
	ИнициализацияВыполнена = Ложь;

	Файл = Новый Файл(КонфигурационныйФайл);
	Если НЕ Файл.Существует() Тогда

		ВызватьИсключение "Конфигурационный файл / каталог '" + КонфигурационныйФайл + "' не обнаружен";

	ИначеЕсли Файл.ЭтоКаталог() Тогда

		АдресКонфигурационногоФайла = ОбъединитьПути(КонфигурационныйФайл, "v8config.json");

	Иначе

		АдресКонфигурационногоФайла = КонфигурационныйФайл;

	КонецЕсли;

	Файл = Новый Файл(АдресКонфигурационногоФайла);
	Если Файл.Существует() Тогда

		Чтение = Новый ЧтениеТекста(АдресКонфигурационногоФайла, "UTF-8");
		ТекстКонфигурации = Чтение.Прочитать();
		Чтение.Закрыть();

		ПарсерJSON = Новый ПарсерJSON;
		Конфигурация = ПарсерJSON.ПрочитатьJSON(ТекстКонфигурации);

	Иначе

		НовыйКонфиг = Истина;
		Конфигурация = Новый Соответствие;

	КонецЕсли;

	ИнициализацияВыполнена = Истина;
	ОбновлятьКонфигурацию = ОбновлятьКонф;

КонецПроцедуры // Инициализация()

// ЭтоНовый
//	Возвращает признак нового конфига, т.е. отсутствие файла
//
// Возвращаемое значение:
//   Булево   - Признак отсутствия файла
//
Функция ЭтоНовый() Экспорт

	Возврат НовыйКонфиг;

КонецФункции // ЭтоНовый()

// ГлобальныеНастройки
//	Возвращает набор глобальных настроек
//
// Возвращаемое значение:
//   Соответствие - Набор глобальных настроек при их наличии, если настроек нет то будет возвращено пустое соответствие
//
Функция ГлобальныеНастройки() Экспорт

	ПроверкаИнициализации();

	Возврат НастройкиПриложения("GLOBAL");

КонецФункции // ГлобальныеНастройки()

// НастройкиПриложения
//	Возвращает набор настроек для приложения
//
// Параметры:
//  ИмяПриложения  - Строка - Имя приложения
//
// Возвращаемое значение:
//   Соответствие - Набор настроек при их наличии, если настроек нет то будет возвращено пустое соответствие
//
Функция НастройкиПриложения(ИмяПриложения) Экспорт

	ПроверкаИнициализации();
	Если ПустаяСтрока(ИмяПриложения) Тогда

		ВызватьИсключение "Не указано имя приложения";

	КонецЕсли;

	ИскомыеНастройки = Конфигурация.Получить(ИмяПриложения);
	Если ИскомыеНастройки = Неопределено Тогда

		ИскомыеНастройки = Новый Соответствие;

	КонецЕсли;

	Возврат ИскомыеНастройки;

КонецФункции // НастройкиПриложения()

// Настройка
//	Возвращает значение искомой настройки
//
// Параметры:
//  ИмяНастройки  - Строка - Имя искомой настройки. Возможные форматы
//				- "МояНастройка" - для чтения глобальной настройки
//				- "МоеПриложение\МояНастройка" - для чтения настройки приложения
//
// Возвращаемое значение:
//   Произвольный   - Значение настройки
//
Функция Настройка(ИмяНастройки)Экспорт

	ПроверкаИнициализации();

	РазложенноеИмяНастройки = РазобратьИмяНастройки(ИмяНастройки);
	ИскомоеПриложение = НастройкиПриложения(РазложенноеИмяНастройки.ИмяПриложения);
	Возврат ИскомоеПриложение.Получить(РазложенноеИмяНастройки.ИмяНастройки);

КонецФункции // Настройка(ИмяНастройки)

// ЗаписатьНастройку
//	Записывает настройку в конфигурационный файл
//
// Параметры:
//  ИмяНастройки  - Строка - Имя искомой настройки. Возможные форматы
//				- "МояНастройка" - для чтения глобальной настройки
//				- "МоеПриложение\МояНастройка" - для чтения настройки приложения
//
//  Значение  - Произвольный - Значение настройки, сериализуемое в JSON
//
Процедура ЗаписатьНастройку(ИмяНастройки, Значение) Экспорт

	ПроверкаИнициализации();

	РазложенноеИмяНастройки = РазобратьИмяНастройки(ИмяНастройки);
	ИскомоеПриложение = НастройкиПриложения(РазложенноеИмяНастройки.ИмяПриложения);
	Если ОбновлятьКонфигурацию ИЛИ ИскомоеПриложение.Получить(РазложенноеИмяНастройки.ИмяНастройки) = Неопределено Тогда

		ИскомоеПриложение.Вставить(РазложенноеИмяНастройки.ИмяНастройки, Значение);

	КонецЕсли;
	Конфигурация.Вставить(РазложенноеИмяНастройки.ИмяПриложения, ИскомоеПриложение);

	ОбновитьКонфигурационныйФайл();

КонецПроцедуры // ЗаписатьНастройку(ИмяНастройки, Значение)

// УдалитьНастройку
//	Удалить настройку в конфигурационный файл
//
// Параметры:
//   ИмяНастройки  - Строка - Имя искомой настройки. Возможные форматы
//				- "МояНастройка" - для чтения глобальной настройки
//				- "МоеПриложение\МояНастройка" - для чтения настройки приложения
//
Процедура УдалитьНастройку(ИмяНастройки) Экспорт

	ПроверкаИнициализации();

	РазложенноеИмяНастройки = РазобратьИмяНастройки(ИмяНастройки);
	ИскомоеПриложение = НастройкиПриложения(РазложенноеИмяНастройки.ИмяПриложения);

	Конфигурация.Удалить(РазложенноеИмяНастройки.ИмяПриложения, ИскомоеПриложение);

	ОбновитьКонфигурационныйФайл();

КонецПроцедуры // УдалитьНастройку()

// ЗаписатьНастройкиПриложения
//	Записывает набор настроек приложения
//
// Параметры:
//  ИмяПриложения  	- Строка - Имя приложения
//  Значение  		- Соответствие - Набор настроек приложения
//
Процедура ЗаписатьНастройкиПриложения(ИмяПриложения, Значение) Экспорт

	ПроверкаИнициализации();

	Если ПустаяСтрока(ИмяПриложения)  Тогда

		ВызватьИсключение "Не указано имя приложения";

	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Соответствие") Тогда

		ВызватьИсключение "Тип значения должен быть Соответствие";

	КонецЕсли;

	Конфигурация.Вставить(ИмяПриложения, Значение);

	ОбновитьКонфигурационныйФайл();

КонецПроцедуры // ЗаписатьНастройкиПриложения()

// УдалитьНастройкиПриложения
//	Удалить набор настроек приложения
//
// Параметры:
//  ИмяПриложения  	- Строка - Имя приложения
//
Процедура УдалитьНастройкиПриложения(ИмяПриложения) Экспорт

	ПроверкаИнициализации();

	Если ПустаяСтрока(ИмяПриложения)  Тогда

		ВызватьИсключение "Не указано имя приложения";

	КонецЕсли;

	Конфигурация.Удалить(ИмяПриложения);

	ОбновитьКонфигурационныйФайл();

КонецПроцедуры // УдалитьНастройкиПриложения()

///////////////////////////////////////////////////////////////////
// Служебный функционал
///////////////////////////////////////////////////////////////////

Процедура ПроверкаИнициализации()

	Если Не ИнициализацияВыполнена Тогда

		ВызватьИсключение "Необходимо выполнить инициализацию";

	КонецЕсли;

КонецПроцедуры

Функция РазобратьИмяНастройки(Знач ИмяНастройки)

	Если ПустаяСтрока(ИмяНастройки) Тогда

		ВызватьИсключение "Не передано имя настройки";

	КонецЕсли;

	ИмяПриложения = "GLOBAL";
	ПозицияРазделителя = СтрНайти(ИмяНастройки, "\");
	Если ПозицияРазделителя > 0 Тогда

		ИмяПриложения = Лев(ИмяНастройки, ПозицияРазделителя - 1);
		ИмяНастройки = Сред(ИмяНастройки, ПозицияРазделителя + 1);

	КонецЕсли;

	Возврат Новый Структура("ИмяПриложения, ИмяНастройки", ИмяПриложения, ИмяНастройки);

КонецФункции // РазобратьИмяНастройки()

Процедура ОбновитьКонфигурационныйФайл()

	ПарсерJSON = Новый ПарсерJSON;
	ТекстКонфигурации = ПарсерJSON.ЗаписатьJSON(Конфигурация);
	Запись = Новый ЗаписьТекста(АдресКонфигурационногоФайла, "UTF-8");
	Запись.Записать(ТекстКонфигурации);
	Запись.Закрыть();

	НовыйКонфиг = Ложь;

КонецПроцедуры

///////////////////////////////////////////////////////////////////

ИнициализацияВыполнена = Ложь;
НовыйКонфиг = Ложь;
Конфигурация = Неопределено;
АдресКонфигурационногоФайла = "";
ОбновлятьКонфигурацию = Ложь;
