//////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

Процедура ОписаниеКоманды(КомандаПриложения) Экспорт

	КомандаПриложения.Аргумент("PATH", "",
						"Каталог исходных файлов конфигурации 1С.
						|При использовании опции -g (--git) нужно передавать каталог репозитория")
						.Обязательный(Истина);

	КомандаПриложения.Опция("format f", "confluence",
						"Формат генерации документации. Поддерживается confluence, html, json, markdown")
						.ТПеречисление()
						.Перечисление("confluence", "confluence", "Документация в формате confluence")
						.Перечисление("html", "html", "Документация в формате html")
						.Перечисление("json", "JSON", "Документация в формате JSON")
						.Перечисление("markdown", "Markdown", "Документация в формате Markdown");

	КомандаПриложения.Опция("config c", "",
						"Путь к конфигурационному файлу. По умолчанию ищет в каталоге исходных файлов");

	КомандаПриложения.Опция("edt", Ложь,
						"Исходники хранятся в формате EDT");
	КомандаПриложения.Опция("delete", Ложь,
						"Удаление ненужных страниц");

	КомандаПриложения.Опция("check-manual", ,
						"Каталог ""ручной"" документации");

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач КомандаПриложения) Экспорт

	ПараметрыКоманды = ПолучитьСтруктуруПараметров(КомандаПриложения);

	ТекстОшибки = "";
	Успешно = ВыполнитьПроверкуПубликации(ПараметрыКоманды, ТекстОшибки);

	Если НЕ Успешно Тогда

		МенеджерПриложения.ПолучитьЛог().Ошибка(ТекстОшибки);
		ЗавершитьРаботу(1);

	КонецЕсли;

КонецПроцедуры

// Возвращает имя команды приложения
Функция ИмяКоманды() Экспорт

	Возврат "check-publish";

КонецФункции // ИмяКоманды

// Возвращает описание исполняемой команды
Функция КраткоеОписаниеКоманды() Экспорт
	
	Возврат "Проверяет наличие страниц в confluence и соответствующих им модулей конфигурации. 
			|Поддерживается только формат Confluence";

КонецФункции // ОписаниеКоманды

#Область Служебные

Функция ПолучитьСтруктуруПараметров(Знач КомандаПриложения)

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("КаталогИсходныхФайлов", КомандаПриложения.ЗначениеАргумента("PATH"));
	ПараметрыКоманды.Вставить("Формат", КомандаПриложения.ЗначениеОпции("format"));
	ПараметрыКоманды.Вставить("ФорматEDT", КомандаПриложения.ЗначениеОпции("edt"));
	ПараметрыКоманды.Вставить("ФайлНастроек", КомандаПриложения.ЗначениеОпции("config"));
	ПараметрыКоманды.Вставить("КаталогДополнительнойДокументации", КомандаПриложения.ЗначениеОпции("check-manual"));
	ПараметрыКоманды.Вставить("УдалятьСтраницы", КомандаПриложения.ЗначениеОпции("delete"));

	Возврат ПараметрыКоманды;

КонецФункции

Функция ВыполнитьПроверкуПубликации(ПараметрыКоманды, ТекстОшибки)
	
	Если ПараметрыКоманды.Формат <> "confluence" Тогда
		
		ТекстОшибки = "Проверка реализована только для формата Confluence";
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьПараметрыКоманды(ПараметрыКоманды);
	
	ОбщегоНазначения.ДополнитьПараметры(ПараметрыКоманды);

	КаталогИсходныхФайлов 		= ПараметрыКоманды.КаталогИсходныхФайлов;
	НастройкиСтенда 			= ПараметрыКоманды.НастройкиСтенда;
	НастройкиАнализаИзменений 	= ПараметрыКоманды.НастройкиАнализаИзменений;

	ТекущийКаталогИсходныхФайлов = ОбщегоНазначения.ПолноеИмяФайла(ПараметрыКоманды.КаталогКонфигурации);

	Конфигурация = РазборКонфигураций.ЗагрузитьКонфигурацию(ТекущийКаталогИсходныхФайлов);
	Конфигурация.ЗаполнитьПодсистемыОбъектовКонфигурации();
	Конфигурация.НайтиМодули();

	НастройкиГенератора = Новый Структура;

	НастройкиГенератора.Вставить("Парсер", Конфигурация);
	НастройкиГенератора.Вставить("НастройкиАнализаИзменений", НастройкиАнализаИзменений);
	НастройкиГенератора.Вставить("КаталогРуководства", ПараметрыКоманды.КаталогДополнительнойДокументации);
	
	ГенераторСодержимого = ОбщегоНазначения.ПолучитьГенераторДокументации(
		ПараметрыКоманды.НастройкиСтенда, 
		ПараметрыКоманды.Формат);
		
	ГенераторДокументации = Новый ГенераторДокументации(ГенераторСодержимого);

	Результат = ГенераторДокументации.ПроверитьОпубликованнуюДокументацию(НастройкиГенератора);
	
	Лог = МенеджерПриложения.ПолучитьЛог();

	Если Результат.Свойство("Сообщения") И Результат.Сообщения.Количество() Тогда
		
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			
			Лог.Информация(Сообщение);
			
		КонецЦикла;
		
	КонецЕсли;

	Успешно = Результат.Успешно;

	Если Успешно И ПараметрыКоманды.УдалятьСтраницы Тогда
		
		Для Каждого Страница Из Результат.УдаляемыеСтраницы Цикл
			
			Лог.Отладка("Удаляю страницу %1", Страница.Представление);
			
			Попытка

				ГенераторСодержимого.УдалитьСтраницу(Страница);
				Лог.Предупреждение("Удалена страница %1 и подчиненные (при наличии)", Страница.Представление);
				
			Исключение
			
				Результат.Ошибки.Добавить("Ошибка удаления страницы " + Страница.Представление + ": " + ОписаниеОшибки());
				Успешно = Ложь;

			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;

	ТекстОшибки = СтрСоединить(Результат.Ошибки, Символы.ПС);

	Если НЕ Успешно Тогда
		
		ТекстОшибки = "Проверка публикации завершилась с ошибкой: " + Символы.ПС + ТекстОшибки;
		
	КонецЕсли;
		
	Возврат ПустаяСтрока(ТекстОшибки);

КонецФункции

#КонецОбласти
